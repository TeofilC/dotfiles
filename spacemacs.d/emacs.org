* Mu4e
  #+begin_src emacs-lisp :tangle no 
    (setq mu4e-maildir "~/mail"
          mu4e-sent-folder "/uni/Sent Items"
          mu4e-drafts-folder "/uni/Drafts"
          mu4e-trash-folder "/uni/Deleted Items"
          mu4e-get-mail-command "offlineimap"
          mu4e-update-interval 180 ;; 3 minutes
          mu4e-headers-auto-update t
          mu4e-enable-notifications t ;; enable notifications on new mail
          user-mail-address "teofil.camarasu@oriel.ox.ac.uk")
    (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display) ;; display mode lin unread mail
    ;; (mu4e t)
  #+end_src
** Set up mu4e-alert
  #+BEGIN_SRC emacs-lisp :tangle yes
    (with-eval-after-load 'mu4e-alert
      ;; Enable Desktop notifications
      (mu4e-alert-set-default-style 'notifications)) ; For linux
      ;; (mu4e-alert-set-default-style 'libnotify))  ; Alternative for linux
      ;; (mu4e-alert-set-default-style 'notifier))   ; For Mac OSX (through the
                                            ; terminal notifier app)
      ;; (mu4e-alert-set-default-style 'growl))      ; Alternative for Mac OSX
  #+END_SRC

* Cite
#+begin_src emacs-lisp :tangle yes
  (setq bibtex-completion-bibliography "~/org/references.bib"
        bibtex-completion-notes-path "~/org/papers/"
        bibtex-completion-pdf-field "File")

  ;; Tell org-ref to let helm-bibtex find notes for it
  (setq org-ref-notes-function
        (lambda (thekey)
          (let ((bibtex-completion-bibliography (org-ref-find-bibliography)))
            (bibtex-completion-edit-notes
             (list (car (org-ref-get-bibtex-key-and-file thekey)))))))

  (defun my/org-ref-open-pdf-at-point ()
    "Open the pdf for bibtex key under point if it exists."
    (interactive)
    (let* ((results (org-ref-get-bibtex-key-and-file))
           (key (car results))
           (pdf-file (car (bibtex-completion-find-pdf key))))
      (if (file-exists-p pdf-file)
          (org-open-file pdf-file)
        (message "No PDF found for %s" (key)))))

  (setq org-ref-default-bibliography '("~/org/references.bib")
        org-ref-notes-directory "~/org/papers"
        org-ref-open-pdf-function 'my/org-ref-open-pdf-at-point)
#+end_src

#+RESULTS:
: nil

* Org mode
#+begin_src emacs-lisp :tangle yes
  (add-hook 'org-mode-hook #'(lambda ()
                               ;;(turn-on-visual-line-mode) ;; Enable linewrap
                               (spacemacs/toggle-visual-line-navigation-on) ;; enable visual line navigation. Ie, use visual lines instead of line numbers. This also enables visual line mode
                               (spacemacs/toggle-line-numbers-off) ;; disable line numbers
                               
                               (setq org-export-with-smart-quotes t) ;; enable smart qoutes
                               ))
#+end_src
#+begin_src emacs-lisp :tangle yes
  (defun my/generate-zettel-name ()
    (setq my-org-note--name (read-string "Title:"))
    (setq my-org-note--time (format-time-string "%Y.%m.%d_%H.%M.%S"))
    (expand-file-name (format "%s.org" my-org-note--time) "~/notes/zettel"))
  (setq
   org-default-notes-file "~/org/notes.org"
   org-capture-templates
   '(("t"
      "Todo list item"
      entry
      (file+headline "~/org/todo.org" "unsorted")
      "* TODO  %?\n %i\n %a")

     ("e"
      "Event"
      entry
      (file+headline "~/org/events.org" "One-off")
      "** %^{Name}
         :PROPERTIES:
         :Added: %U
         :Location: %^{Location}
         :END:
         At: %^T"
      )

     ("j" "Journal Entry"
      entry (file+weektree "~/notes/journal.org")
      "*** TODO %U \n - %?"
      )

     ("i" "Idea"
      entry (file "~/org/ideas.org")
      "* %? ")

     ("r" "Add to Reading List"
      entry (file+headline "~/notes/readinglist.org" "Read")
      "** %^{Title}, by %^{Author} \n %^{content}")

     ("z" "Zettel" plain
      (file my/generate-zettel-name)
      "%(format \"#+TITLE: %s\n#+DATE: %s\n#+TAGS:\n\#+SOURCE: n\" my-org-note--name my-org-note--time)"
      )
     )
   )
#+end_src
#+begin_src emacs-lisp :tangle yes
(add-to-list 'org-latex-classes 
             '("memoir" 
               "\\documentclass{memoir}"
               ("\\chapter{%s}" . "\\chapter*{%s}")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
               )
)
#+end_src
** Enable Habits
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'org-modules 'org-habit)
#+end_src

** Agenda mode
#+begin_src emacs-lisp :tangle yes
  (setq org-agenda-files '("~/org/todo.org" "~/org/inbox.org" "~/org/events.org"))
#+end_src

